import os
import io
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import paddle
from paddle.nn import functional as F
import random
from paddle.io import Dataset
from visualdl import LogWriter
from paddle.vision.transforms import transforms as T
import warnings
warnings.filterwarnings("ignore")
import time
from time import *

import os
import random
from PIL import Image
import matplotlib.pyplot as plt

import paddle.nn as nn
from paddle.nn.initializer import TruncatedNormal, Constant

import os
import random

import numpy as np
# 加载飞桨相关库
import paddle
from paddle.nn import Conv2D, MaxPool2D, Linear
import paddle.nn.functional as F

# 从 visualdl 库中引入 LogWriter 类
from visualdl import LogWriter
# 创建 LogWriter 对象，指定 logdir 参数，如果指定路径不存在将会创建一个文件夹
logwriter = LogWriter(logdir='./runs/experiment')


# 解压数据集
#! mkdir /home/aistudio/DataSet
! unzip -oq /home/aistudio/data/data182023/CFD.zip -d DataSet


#MDA
class MDA(nn.Layer):
    def __init__(self, ch_in,ch_out,H):#chout=1
        super(MDA, self).__init__()
        self.conv1 = nn.Sequential(
            nn.Conv2D(ch_in,ch_out, kernel_size=7, stride=1, padding=3),
            nn.BatchNorm(ch_out),
            nn.ReLU()
        )
        self.conv2 = nn.Sequential(
            nn.Conv2D(ch_in,ch_out, kernel_size=(7,1), stride=1, padding=(3,0)),
            nn.BatchNorm(ch_out),
            nn.ReLU()
        )
        self.conv3 = nn.Sequential(
            nn.Conv2D(ch_in,ch_out, kernel_size=(1,7), stride=1, padding=(0,3)),
            nn.BatchNorm(ch_out),
            nn.ReLU()
        )
        self.pool1=nn.AdaptiveAvgPool2D(output_size=(1,1))
        self.pool2=nn.AvgPool2D(kernel_size=(1,H),stride=(1,H))
        self.pool3=nn.AvgPool2D(kernel_size=(H,1),stride=(H,1))

        self.act1=nn.Sigmoid()
        self.act2=nn.Sigmoid()
        self.act3=nn.Sigmoid()

    def forward(self, x):
        x1=x
        x2=x
        x3=x
        x11=self.pool1(x1)
        x11=self.conv1(x11)
        x11=self.act1(x11)
        x1=x11*x1

        x21=self.pool2(x2)
        x21=self.conv2(x21)
        x21=self.act2(x21)
        x2=x21*x2

        x31=self.pool3(x3)
        x31=self.conv3(x31)
        x31=self.act3(x31)
        x3=x31*x3

        out=x1+x2+x3
        return out

#MSAF
class MSAF(nn.Layer):
    def __init__(self, ch_in, ch_out):#chout=1
        super(MSAF, self).__init__()
        self.conv1 = nn.Sequential(
            nn.Conv2D(ch_in, ch_in, kernel_size=3, stride=1, padding=1,dilation=1),
            nn.BatchNorm(ch_in),
            nn.ReLU()
        )
        self.conv2 = nn.Sequential(
            nn.Conv2D(ch_in, ch_in, kernel_size=3, stride=1, padding=6,dilation=6),
            nn.BatchNorm(ch_in),
            nn.ReLU()
        )
        self.conv3 = nn.Sequential(
            nn.Conv2D(ch_in, ch_in, kernel_size=3, stride=1, padding=12,dilation=12),
            nn.BatchNorm(ch_in),
            nn.ReLU()
        )

        self.pool1=nn.AdaptiveAvgPool2D(output_size=(1,1))
        self.pool2=nn.AdaptiveAvgPool2D(output_size=(1,1))

        self.conv4=nn.Conv2D(2*ch_in,ch_out,kernel_size=1,stride=1)
        self.conv5=nn.Conv2D(2*ch_in,ch_out,kernel_size=1,stride=1)

        self.act1=nn.Sigmoid()
        self.act2=nn.Sigmoid()

    def forward(self, x):
        x1 = self.conv1(x)
        x2 = self.conv2(x)
        x3 = self.conv3(x)

        x21=paddle.concat(x=[x1,x2],axis=1)
        x22=paddle.concat(x=[x2,x3],axis=1)

        x21=self.pool1(x21)
        x22=self.pool2(x22)

        x21=self.conv4(x21)
        x22=self.conv5(x22)

        x21=self.act1(x21)
        x22=self.act2(x22)

        x31=x21*x1
        x32=x21*x2

        x33=x22*x2
        x34=x22*x3

        x41=x31+x32
        x42=x33+x34

        out=x41+x42
        out=out+x

        return out

#AWL
class AWL(nn.Layer):
    def __init__(self, ch_in):
        super(AWL, self).__init__()
        self.pool1=nn.AdaptiveAvgPool2D(output_size=(1,1))
        self.pool2=nn.AdaptiveMaxPool2D(output_size=(1,1))
        self.conv=nn.Conv2D(ch_in,4,kernel_size=1,stride=1)
        self.act=nn.Sigmoid()

    def forward(self, x):
        x1=x[:,0:1,:,:]
        x2=x[:,1:2,:,:]
        x3=x[:,2:3,:,:]
        x4=x[:,3:4,:,:]
        x01=self.pool1(x)
        x02=self.pool2(x)
        x0=x01+x02
        x0=self.conv(x0)
        x0=self.act(x0)

        y1=x0[:,0:1,:,:]
        y2=x0[:,1:2,:,:]
        y3=x0[:,2:3,:,:]
        y4=x0[:,3:4,:,:]

        y1=x1*y1
        y2=x2*y2
        y3=x3*y3
        y4=x4*y4
        out=y1+y2+y3+y4
        return out


class conv_block(nn.Layer):
    def __init__(self, ch_in, ch_out):
        super(conv_block, self).__init__()
        self.conv = nn.Sequential(
            nn.Conv2D(ch_in, ch_out, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm(ch_out),
            nn.ReLU(),
            nn.Conv2D(ch_out, ch_out, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm(ch_out),
            nn.ReLU()
        )

    def forward(self, x):
        x = self.conv(x)
        return x

class up_conv(nn.Layer):
    def __init__(self, ch_in, ch_out):
        super(up_conv, self).__init__()
        self.up = nn.Sequential(
            nn.Upsample(scale_factor=2),
            nn.Conv2D(ch_in, ch_out, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm(ch_out),
            nn.ReLU()
        )

    def forward(self, x):
        x = self.up(x)
        return x

class MFAAF(nn.Layer):
    def __init__(self, ch_in, ch_out):
        super(MFAAF, self).__init__()
        self.conv02=conv_block(3,64)
        self.conv03=conv_block(3,128)
        self.conv04=conv_block(3,256)

        self.pool01=nn.AvgPool2D(kernel_size=2,stride=2)
        self.pool02=nn.AvgPool2D(kernel_size=2,stride=2)
        self.pool03=nn.AvgPool2D(kernel_size=2,stride=2)

        self.pool1=nn.MaxPool2D(kernel_size=2,stride=2)
        self.pool2=nn.MaxPool2D(kernel_size=2,stride=2)
        self.pool3=nn.MaxPool2D(kernel_size=2,stride=2)

        self.conv1=conv_block(3,64)
        self.conv2=conv_block(128,128)
        self.conv3=conv_block(256,256)
        self.conv4=conv_block(512,512)

        self.mda1=MDA(64,1,256)
        self.mda2=MDA(128,1,128)
        self.mda3=MDA(256,1,64)
        self.mda4=MDA(512,1,32)

        self.conv11=nn.Conv2D(64,1,kernel_size=1,stride=1)
        self.conv21=nn.Conv2D(128,1,kernel_size=1,stride=1)
        self.conv31=nn.Conv2D(256,1,kernel_size=1,stride=1)
        self.conv41=nn.Conv2D(512,1,kernel_size=1,stride=1)

        self.conv12=nn.Conv2D(4,64,kernel_size=1,stride=1)
        self.conv22=nn.Conv2D(4,128,kernel_size=1,stride=1)
        self.conv32=nn.Conv2D(4,256,kernel_size=1,stride=1)
        self.conv42=nn.Conv2D(4,512,kernel_size=1,stride=1)


        self.up1=nn.UpsamplingBilinear2D(scale_factor=2)
        self.up2=nn.UpsamplingBilinear2D(scale_factor=4)
        self.up3=nn.UpsamplingBilinear2D(scale_factor=8)

        self.up4=nn.UpsamplingBilinear2D(scale_factor=1/2)
        self.up5=nn.UpsamplingBilinear2D(scale_factor=1/4)
        self.up6=nn.UpsamplingBilinear2D(scale_factor=1/8)

        self.pool4=nn.MaxPool2D(kernel_size=2,stride=2)
        self.msaf=MSAF(512,1)
        self.up0=up_conv(512,512)

        self.conv5=conv_block(1024,512)
        self.upconv5=up_conv(512,256)

        self.conv6=conv_block(512,256)
        self.upconv6=up_conv(256,128)

        self.conv7=conv_block(256,128)
        self.upconv7=up_conv(128,64)

        self.conv8=conv_block(128,64)

        self.lastconv1=nn.Conv2D(64,1,kernel_size=1,stride=1)

        self.lastconv2=nn.Conv2D(128,1,kernel_size=1,stride=1)
        self.lastup2=nn.UpsamplingBilinear2D(scale_factor=2)

        self.lastconv3=nn.Conv2D(256,1,kernel_size=1,stride=1)
        self.lastup3=nn.UpsamplingBilinear2D(scale_factor=4)

        self.lastconv4=nn.Conv2D(512,1,kernel_size=1,stride=1)
        self.lastup4=nn.UpsamplingBilinear2D(scale_factor=8)

        self.awl=AWL(4)

        self.conv1_1=nn.Conv2D(1,2,kernel_size=1,stride=1)

    def forward(self, x):
        x01=x
        x02=self.pool01(x01)
        x21=self.conv02(x02)#64 128 128

        x03=self.pool02(x02)
        x31=self.conv03(x03)#128 64 64

        x04=self.pool03(x03)
        x41=self.conv04(x04)#256 32 32

        x1=self.conv1(x)

        x2=self.pool1(x1)
        #x2=x2+x21
        x2=paddle.concat(x=[x2,x21],axis=1)
        x2=self.conv2(x2)

        x3=self.pool2(x2)
        #x3=x31+x3
        x3=paddle.concat(x=[x3,x31],axis=1)
        x3=self.conv3(x3)

        x4=self.pool3(x3)
        #x4=x41+x4
        x4=paddle.concat(x=[x4,x41],axis=1)
        x4=self.conv4(x4)

        m1=self.mda1(x1)
        m2=self.mda2(x2)
        m3=self.mda3(x3)
        m4=self.mda4(x4)

        m1=self.conv11(m1)

        m2=self.conv21(m2)
        m2=self.up1(m2)

        m3=self.conv31(m3)
        m3=self.up2(m3)

        m4=self.conv41(m4)
        m4=self.up3(m4)

        msk=paddle.concat(x=[m1,m2,m3,m4],axis=1)
        msk1=self.conv12(msk)

        msk2=self.conv22(msk)
        msk2=self.up4(msk2)

        msk2=self.conv22(msk)
        msk2=self.up4(msk2)

        msk3=self.conv32(msk)
        msk3=self.up5(msk3)

        msk4=self.conv42(msk)
        msk4=self.up6(msk4)

        ms=self.pool4(x4)
        ms=self.msaf(ms)
        ms=self.up0(ms)

        decoder1=paddle.concat(x=[ms,msk4],axis=1)
        decoder1=self.conv5(decoder1)

        decoder2=self.upconv5(decoder1)
        decoder2=paddle.concat(x=[msk3,decoder2],axis=1)
        decoder2=self.conv6(decoder2)

        decoder3=self.upconv6(decoder2)
        decoder3=paddle.concat(x=[msk2,decoder3],axis=1)
        decoder3=self.conv7(decoder3)

        decoder4=self.upconv7(decoder3)
        decoder4=paddle.concat(x=[msk1,decoder4],axis=1)
        decoder4=self.conv8(decoder4)

        last4=self.lastconv1(decoder4)#深监督

        last3=self.lastup2(decoder3)
        last3=self.lastconv2(last3)#深监督

        last2=self.lastup3(decoder2)
        last2=self.lastconv3(last2)#深监督

        last1=self.lastup4(decoder1)
        last1=self.lastconv4(last1)#深监督

        out=paddle.concat(x=[last1,last2,last3,last4],axis=1)
        out=self.awl(out)

        out=self.conv1_1(out)
        return out

IMAGE_SIZE = (256,256)
network = MFAAF(3,2)
model = paddle.Model(network)
model.summary((-1, 3) + IMAGE_SIZE)